<template>
  <view class="container" wx:if="{{init}}">
    <view class="assign-top row-center" >
        <text class="xxl default"> 作业列表 </text>
    </view>
    <!--主内容区域-->
    <view class="main-box row" wx:if="{{!isPageEmpty}}" >
        <!--分类侧边栏-->
      <!--右侧滚动-->
      <scroll-view scroll-y class="goods-box" bindscrolltolower="onReachBottom">
        <!--分类名称
        <view class="goods-title row">
          <text class="weak">{{selectedCategoryName}}</text>
        </view> -->
        <!--指南列表-->
        <view class="guide-list">
          <repeat for="{{page.list}}" key="index" index="index" item="item">
            <AssignItem :assign.sync="item" @startExam.user="startExam"  />
          </repeat>
        </view>
        <Loadmore :page.sync="page" emptyText="暂无项目"/>
        <!--占位符-->
      </scroll-view>
    </view>
    <Placeholder :show.sync="isPageEmpty" message="您还没有登录" />
  </view>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import pagination from '../../mixins/pagination';
  import auth from '../../api/auth';
  import exam from '../../api/exam';
//  import signin from '../../api/signin';
  import AssignItem from '../../components/exam/assignItem';
  import SideCategory from '../../components/manusl/side_category';
  import ActionBar from '../../components/common/action_bar';
  import Placeholder from '../../components/common/placeholder';
  import Loadmore from '../../components/weui/loadmore';
  import Event from '../../utils/Event';
  import Cache from '../../utils/Cache';
  import Tips from '../../utils/Tips';
  export default class AssignList extends wepy.page {
    def = {
      init: false,
      display: 'false',
      page: {
        list: []
      },
      isPageEmpty: false,

      categories: []
    };
    data = {...this.def};
    async onLoad (option) {
      await this.load();
      Event.listen(Event.USER_LOGIN, this.load.bind(this), this);
      Event.listen(Event.USER_LOGOUT, this.load.bind(this), this);
    };
    async load () {
      try{
        const loginCode = auth.getConfig('login_code');
        if (loginCode != null) {

          this.page = exam.assignList(loginCode);
          await this.next();
          console.info("this.page.list",this.page.list);
          this.isPageEmpty=false;
        }else{
          this.isPageEmpty=true;
        }
      } catch (e) {
        Tips.modal(e.message);
      } finally {
        this.loaded();
      }
    };
    async updateApply(){
      console.info("updateApply================");
    };
    // 获取部门
    async getColumnList() {
      // 加载部门
      this.categories = await Cache.columnList();
      console.info("this.categories",this.categories);
      if (this.categories && this.categories.length > 0) {
        this.categories.selectedId = "all";
      }
       this.loaded();
    };

    methods = {
      async startExam(info) {
        console.info("info",info);
        if(info.formId != "the formId is a mock one"){
          exam.collectFormIds(info.formId);
        }
        var eids=info.examId.split(",");
        this.$root.$navigate('/pages/exam/examPage', {examId: eids[0]});
      },
      async queryAnswer(info) {
        if (!auth.isLogin()) {
          this.$root.$navigate('/pages/login/index',{url:'/pages/exam/examAnswer',examId:info.examId});
        }else{
          try {
            var openId = auth.getConfig('openId');
            var data=await exam.queryScore(openId,info.examId);
            if(data!="fail"){
              this.$root.$navigate('/pages/exam/examAnswer', {examId: info.examId});
            }else{
              Tips.modal("先考试，再看答案");
            }
          } catch (e) {
            Tips.error(e.message);
          } finally {
            this.loaded();
          }
       }
      },
      async queryScore(info) {
        try{
          var openId = auth.getConfig('openId');
          if (openId == null) {
            openId=await auth.jscode2session();
            await auth.setConfig('openId', openId);
          }
          var data=await exam.queryScore(openId,info.examId);
          console.info("data",data);
          if(data!="fail"){
            Tips.modal("考试成绩: "+data+" 分");
          }else{
            Tips.modal("还没有考试");
          }

        } catch (e) {
          Tips.error(e.message);
        } finally {
          this.loaded();
        }
      },

    };
    events = {};
    components = {
      Placeholder: Placeholder,
      AssignItem: AssignItem,
      ActionBar: ActionBar,
      Loadmore: Loadmore,
    };
    mixins = [base, pagination];
    config = {
      navigationBarTitleText: '作业列表',
      enablePullDownRefresh: true
    };
  }
</script>

<style lang="scss">
  @import "../../styles/variable";
  .empty-placeholder{
    position: fixed;
    top: 300rpx;
    width: 100%;
    height: 300rpx;
    align-items: center;

    text{
      color: $color-weak;
      font-size: 40rpx;
    }
  }

  .main-box{
    width: 100%;
    position: absolute;
    top: 43px;
/*    bottom: 55px; */

    .goods-box{
      flex: 1;
      height: 100%;
      .goods-title{
        height: 30px;
        padding-left: 20rpx;
        align-items: center;
        border-bottom: $border;
      }
      .guide-list{
        background-color: #FFF;
      }
    }
  }
  .assign-top {
    height: 41px;
    background-color: #FFF;
  }  
</style>
